<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Websockets | Lainé Louis]]></title>
  <link href="http://llaine.github.io/blog/categories/websockets/atom.xml" rel="self"/>
  <link href="http://llaine.github.io/"/>
  <updated>2015-03-17T12:13:23+01:00</updated>
  <id>http://llaine.github.io/</id>
  <author>
    <name><![CDATA[Lainé Louis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction to webSockets With NodeJS]]></title>
    <link href="http://llaine.github.io/blog/2014/10/12/websocket/"/>
    <updated>2014-10-12T12:12:09+02:00</updated>
    <id>http://llaine.github.io/blog/2014/10/12/websocket</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Today a small article about a new web standard, the webSockets.</p>

<p>This new protocol allow to create a bi-directional connexion between the client and the server in order to solve some HTTP problems and his uni-directional connexion.</p>

<p>You can easily create real time application as games, chat and so.</p>

<p>The server is able to &ldquo;push&rdquo; informations on the client even if the client hasn&rsquo;t asked for.</p>

<h1>Use case</h1>

<p>We are going to create a simple chat.</p>

<ul>
<li>The user can send messages to connected clients with a username from a web page</li>
<li>The user can send messages to connected clients from console.</li>
<li>The server is able to count the number of connected client and trace the conversation.</li>
</ul>


<h1>Tree directory</h1>

<pre><code class="bash Init the repository">$ mkdir webSocket &amp;&amp; cd webSocket ; npm init
</code></pre>

<p>We are going to use a simple library called <code>websocket</code> which is the (mostly) pure JavaScript implementation of the WebSocket protocol versions 8 and 13 for Node.</p>

<pre><code class="json package.json">"dependencies": {
    "websocket": "^1.0.8"
} 
...
</code></pre>

<h1>Server</h1>

<p>Copy paste this code sample in a server.js file.</p>

<pre><code class="javascript server.js">
var WebSocketServer = require('websocket').server
  , http = require('http')
  , lesConnexions = [] // Will store all the connection
    // process HTTP request. Since we're writing just WebSockets server
    // we don't have to implement anything.
  , server = http.createServer()
  , PORT = 1337;


server.listen(PORT);

/* bootstraping the HTTP server */
wsServer = new WebSocketServer({
    httpServer: server
});

log("Server listenning on " + PORT + " ...");

/* when a new client is trying to connect on the server */
wsServer.on("request", function(req, res){
    var connection = req.accept(null, req.origin);

    // add the new connection in the current connection
    lesConnexions.push(connection);     

    connection.on("message", function(message){
        // When a message is send
    });

    connection.on("close", function(){
        // When the connection is closed
    });


});

/**
* Log into the NodeJS console
* @item : the item to be logged
*/
function log(item){
    console.log("[" + new Date().toDateString() + "] " + item);
}
</code></pre>

<p>This is the basic implementation of the server with websocket package.
Whe have here a server listenning to the <strong>1337</strong> port.</p>

<h1>Client</h1>

<h2>Console</h2>

<p>The websocket library allow you to easily implement a client in a simple console app.</p>

<pre><code class="javascript client.js">var WebSocketClient = require('websocket').client;


var client = new WebSocketClient();

client.on('connectFailed', function(error) {
    console.log('Connect Error: ' + error.toString());
});

client.on('connect', function(connection) {
    console.log('WebSocket client connected');

    connection.on('error', function(error) {
        console.log("Connection Error: " + error.toString());
    });

    connection.on('close', function() {
        console.log('echo-protocol Connection Closed');
    });

    connection.on('message', function(message) {
        // when a message is send
    });

});

client.connect('ws://127.0.0.1:1337/');
</code></pre>

<h2>Browser version</h2>

<p>We also want to discuss through the tiny chat from a internet browser so let&rsquo;s create simple index.html file.</p>

<p><strong>Note</strong> : I use bower to manage my libraries, in this case it&rsquo;s only jQuery.</p>

<pre><code class="html ">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;title&gt;WebSocket&lt;/title&gt;
&lt;/head&gt;
  &lt;body&gt;

    &lt;div id="head"&gt;
      &lt;span id="state"&gt;&lt;/span&gt;
      &lt;input type="text" id="name" placeholder="Pseudo" value="webUser"&gt;
    &lt;/div&gt;

    &lt;div id="chatMessages"&gt;
      &lt;input type="text" id="input"&gt;
      &lt;ul id="messages"&gt;&lt;/ul&gt;
    &lt;/div&gt;

    &lt;script src="bower_components/jquery/dist/jquery.js"&gt;&lt;/script&gt;
    &lt;script&gt;
      // The client javascript implementation
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Related to the html file, we need to use the simple API to connect to our server.</p>

<pre><code class="javascript ">
/**
* Send a message with a username
* @content : the content of the message
* @username : the username of the message
*/
function sendMessage(content, username){

  if(!content || !username) return;

  var msg = {
    txt : content,
    username : username
  };

  connection.send(JSON.stringify(msg));

}

(function($){
    var state = $("#state")
    ,   input = $("#input")
    ,   messages = $("#messages")
    ,   username = $("#name");

    window.WebSocket = window.WebSocket || window.MozWebSocket;

    var connection = new WebSocket('ws://127.0.0.1:1337');

      connection.onopen = function () {
          // connection is opened and ready to use
          state.html("open");
      };

      connection.onerror = function (error) {
        // an error occurred when sending/receiving data
          state.html("error ");
          input.prop('disabled', true);
          username.prop('disabled', true);
      };

      connection.onmessage = function (message) {
        // message is send

      };


      input.keydown(function(e){

        /* when the enter key is pressed */
        if(e.keyCode === 13){

          var theMsg = $(this).val();

          sendMessage(theMsg, username.val());

          $(this).val("");

        }

      });


  })(jQuery);
</code></pre>

<p>Now let&rsquo;s look at how to manager the sending and receiving of messages.</p>

<h3>Server</h3>

<pre><code class="javascript ">
  // In the request callback. 

  log("connection from " + connection.remoteAddress);
  log("currently " + lesConnexions.length + " clients");

 connection.on('message', function(message) {
    // We only wants to send char, not bytes.
    if(message.type === "utf8"){

      // for each connected clients
      for (var i = lesConnexions.length - 1; i &gt;= 0; i--) {
        lesConnexions[i].sendUTF(message.utf8Data);
      }

    }

  });

  connection.on('close', function(connection) {
    lesConnexions.splice(lesConnexions[lesConnexions.length], 1);
    log("connection closed");
  });
</code></pre>

<h3>Client - console</h3>

<p>The console implementation will be a little bit different because we need to get the user inputs.</p>

<p>I&rsquo;m going to use the <strong>sys</strong> library.</p>

<pre><code class="javascript client.js">
var sys = require("sys");
var stdin = process.openStdin();
// ...

 connection.on('message', function(message) {
     if (message.type === 'utf8') {
         var msg = JSON.parse(message.utf8Data);
         if(msg.username === undefined) msg.username = "default";

         console.log("--&gt; [" + msg.username + "] : "+  msg.txt  +"");
     }
 });

 // add callback for user inputs
 stdin.addListener("data", function(d) {
     // note:  d is an object, and when converted to a string it will
     // end with a linefeed.  so we (rather crudely) account for that
     // with toString() and then substring()
     var msg = d.toString().substring(0, d.length-1);

     if(connection.connected || msg){
         connection.sendUTF(JSON.stringify({
             txt : msg,
             username : "console"
         }));

     }
 });
</code></pre>

<h3>Client - index.html</h3>

<pre><code class="javascript index.html"> connection.onmessage = function (message) {
  var value = JSON.parse(message.data);


  messages.append(
      "&lt;li&gt;" 
        + new Date(message.timeStamp).toDateString() 
        + " | &lt;strong&gt;" + value.username 
        +  "&lt;/strong&gt; - &lt;pre&gt; " + value.txt 
        + "&lt;/pre&gt;
      + "&lt;/li&gt;"
    );

  };
</code></pre>

<h1>Conclusion</h1>

<p>We seen how to deal with webSockets through those simple use cases.</p>

<p>You can find all the code we&rsquo;ve seen on <a href="https://gist.github.com/llaine/2072f26c3dcde373a141">github</a></p>

<p>Feel free to comment for any informations!</p>
]]></content>
  </entry>
  
</feed>
